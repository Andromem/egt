namespace egt { inline namespace v1 {
/**

 @page theme Theme

This chapter discusses how to to use Themes.

@section theme_overview Theme Inheritance

Theme is a class that holds a palette, font, and drawing functions used by
widgets.  By default, there is a global_theme() that is used by all widgets.
This can be changed by calling set_global_theme().

Each Widget references a Theme through its Widget::theme() call.  However,
theme's are inherited by default from a Widget's parent.  If no parent widget
has a theme, the global_theme() is used by default.

To break the inheritance, call Widget::set_theme().  This will cause the Widget
to maintain its own theme and not inherit from its parent or the global theme.
So, if you change the theme for a Window, all of its child widgets will inherit
that theme by default unless you call Widget::set_theme() on one of the
children.

Inheritance of the Theme provides a natural and flexible way to manage the look
of widgets with less code.

@section theme_default_draw Widget Type Default Draw Functions

Each widget type has a default_draw() function that implements the EGT default
drawing method for the widget type. This function provides an example how how
you would implement your own draw function to customize the look of a widget.

@section theme_type_draw Widget Type Draw Functions

It is possible to change the draw() function for a Widget type globally based
only on the widget's c++ type.  For example, you can change the draw() function
for all Button widgets by setting one draw method.

@section theme_instance_draw Widget Instance Draw Functions

It is currently not possible to change the draw() function for a specific
instance of a Widget.  To accomplish this task, you must inherit from the widget
type you wish to change and overload the draw() function.  Then, use the new
widget type.

*/
}}