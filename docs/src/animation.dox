namespace egt { inline namespace v1 {
/**

 @page animations Animations

This chapter discusses how to to use animations.

@section animations_classes Animation Classes

EGT provides a variety of classes for working with animations.  The
Animation, AnimationSequence, AutoAnimation, and
PropertyAnimator classes all provide ways to animate almost anything.

On top of these base animation classes, there are also higher order classes such
as Sprite that provides a built in way to animate sprite sheets and
even different strips within the same sheet.

@section animations_easingfunctions Predefined Easing Functions

There are quite a few predefined @ref EasingFunctions in EGT, but it is also
possible to define your own.  When creating any animation, you can pass a custom
easing function or select one of the predefined ones.

For example, to shrink a button width with a custom easing function, it would be
as simple as:

@code{.cpp}
Button button("hello world");
win.add(&button);

PropertyAnimator shrink(100, 10, std::chrono::seconds(1), easing_boing);
shrink_in.on_change(std::bind(&Button::set_width, std::ref(button),
						  std::placeholders::_1));
shrink.start();
@endcode

All easing functions take a percent time, and return a percent value.  They have
a very simple API, but what happens inside the easing function can be anywhere
from a simple liner value to a complex mathematical curve. For example, the
simplest of easing functions is the easing_linear() function that is
implemented like so:

@code{.cpp}
float_t easing_linear(float_t p)
{
    return p;
}
@endcode

The examples/easing/ directory contains an example that allows you to visually
select and see some of the different easing functions and how they work.

See <https://easings.net> for more information about other easing functions.
*/
}}