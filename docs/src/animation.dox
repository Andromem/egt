namespace egt { inline namespace v1 {
/**

 @page animations Animations

This chapter discusses how to to use animations.

@section animations_classes Animation Classes

EGT provides a variety of classes for working with animations.  The
Animation, AnimationSequence, AutoAnimation, and
PropertyAnimatorType classes all provide ways to animate almost anything.

On top of these base animation classes, there are also higher order classes such
as Sprite that provides a built in way to animate sprite sheets and
even different strips within the same sheet.  A benefit of having EGT do this is
it can use hardware accelerated composition to animate the Sprite when
available.

There are a couple basic concepts to know when working with animations in EGT.
An animation, in its most basic form, is some computed value in some range
over some period of time.

@image html easing_graph.png "Easing Curve Graph"
@image latex easing_graph.png "Easing Curve Graph" width=8cm

Of course, the interesting question is how is that value computed over a
specified time-frame?  The most straightforward answer is just linearly.  The
min value is at the starting time and the max value is at ending time, and every
value in-between is evenly spread out.  However, more complex versions of this
are necessary to add some life and diversity to animations.  In comes the idea
of easing functions.  Easing functions define what that value should be, linear
or otherwise.

@section animations_easingfunctions Predefined Easing Functions

There are quite a few predefined @ref easing_functions in EGT, but it is also
possible to define your own.  When creating any animation, you can pass a custom
easing function or select one of the predefined ones.

All easing functions take a percent time, and return a percent value.  They have
a very simple API, but what happens inside the easing function can be anywhere
from a simple liner value to a complex mathematical curve. For example, the
simplest of easing functions is the easing_linear() function that is
implemented like so:

@code{.cpp}
float_t easing_linear(float_t p)
{
    return p;
}
@endcode

@imageSize{easing_linear.png,width:400px;}
@image html easing/easing_linear.png "Linear Easing Curve"
@image latex easing/easing_linear.png "Linear Easing Curve" width=8cm

A more complicated easing function, might include a circular calculation.

@code{.cpp}
float_t easing_circular_easein(float_t p)
{
    return 1 - std::sqrt(1 - (p * p));
}
@endcode

@imageSize{easing_circular_easein.png,width:400px;}
@image html easing/easing_circular_easein.png "Circular Easein Easing Curve"
@image latex easing/easing_circular_easein.png "Circular Easein Easing Curve" width=8cm

The @b examples/easing/ directory contains an example that allows you to
visually select and see some of the different easing functions and how they
work.

@see <https://easings.net> has more information about other easing functions.

@section animations_animating Animating Widgets

For example, to shrink a button width with a custom easing function, it might
involve doing the following:

@code{.cpp}
Button button("hello world");
win.add(&button);

PropertyAnimator shrink(100, 10, std::chrono::seconds(1), easing_boing);
shrink_in.on_change(std::bind(&Button::set_width, std::ref(button),
						  std::placeholders::_1));
shrink.start();
@endcode



*/
}}