namespace egt { inline namespace v1 {
/**

 @page eclipse Eclipse Integration

@section eclipse_Integration Eclipse Integration

Integration with Eclipse simplifies the compilation, remote execution
and remote debugging of EGT applications using EGT Library built in
Buildroot system.

The typical usage model of our EGT integration with Eclipse would be:

1. Configure your Buildroot system with make menuconfig, make xconfig or
   any other configuration interface provided with Buildroot.
2. Enable EGT package and their dependencies.
3. Build your Buildroot system by running make.
4. Start Eclipse to develop, execute and debug your own custom EGT
   applications/libraries, that will rely on EGT library built and
   installed by Buildroot.

This tutorials will guide you through the installation, usage of Eclipse
for developing EGT application and Buildroot integration.

@section eclipse_installation Eclipse Installation

Download Eclipse IDE for C/C++ Developers (Luna 4.4) from
<http://www.eclipse.org/downloads/packages/release/luna/r/eclipse-ide-cc-developers>
and follow below steps for installation.

Extract the eclipse-cpp-luna-R-linux-gtk-x86_64.tar.gz to folder /opt

@code{.sh}
tar -zxvf eclipse-cpp-luna-R-linux-gtk-x86_64.tar.gz -C /opt
@endcode

Create a desktop file and install it:

@code{.sh}
gedit eclipse.desktop
@endcode

copy below lines to the eclipse.desktop file

@code{.sh}
[Desktop Entry]
Name=Eclipse
Type=Application
Exec=env UBUNTU_MENUPROXY=0 eclipse44
Terminal=false
Icon=eclipse
Comment=Integrated Development Environment
NoDisplay=false
Categories=Development;IDE;
Name[en]=Eclipse
@endcode

Set a executable permission and execute following command to install it:

@code{.sh}
sudo desktop-file-install eclipse.desktop
@endcode

Create a symlink in /usr/local/bin

@code{.sh}
sudo ln -s /opt/eclipse/eclipse /usr/local/bin/eclipse44
@endcode

For eclipse icon to be displayed in dash, eclipse icon can be added as

@code{.sh}
sudo cp /opt/eclipse/icon.xpm /usr/share/pixmaps/eclipse.xpm
@endcode

Eclipse need to have either OpenJDK or Sun Java installed to be able to
run eclipse and here is a simple example of installing Open JDK 1.6:

@code{.sh}
sudo apt-get install openjdk-6-jdk
@endcode

@section eclipse_buildroot_setup Buildroot setup

The Eclipse Buildroot plugin discovers the available Buildroot toolchains
by reading a file named .buildroot-eclipse.toolchains which is generated
in the user home directory. This file does not have to be written manually.
Buildroot will automatically add all the generated toolchains into this
file by enabling BR2_ECLIPSE_REGISTER option in make menuconfig.

go into the toolchain package and select “Register toolchain with Eclipse Buildroot plug-in”
as show in below.

@imageSize{eclipse_buildroot_toolchain.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_buildroot_toolchain.png "Buildroot setup"
@image latex eclipse/eclipse_buildroot_toolchain.png "Buildroot setup"

@section eclipse_buildroot_plugin Install Eclipse Buildroot plugin

In Eclipse, Go to the Help menu and select Install new software:

@imageSize{eclipse_buildroot_plugin1.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_buildroot_plugin1.png "Eclipse Install new software"
@image latex eclipse/eclipse_buildroot_plugin1.png "Eclipse Install new software"

Add a new update-site https://buildroot.org/downloads/eclipse/

@imageSize{eclipse_buildroot_plugin2.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_buildroot_plugin2.png "Install Eclipse Buildroot plugin"
@image latex eclipse/eclipse_buildroot_plugin2.png "Install Eclipse Buildroot plugin"

Then, select the Buildroot update-site and install the provided feature.

@imageSize{eclipse_buildroot_plugin3.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_buildroot_plugin3.png "Eclipse select Buildroot plugin"
@image latex eclipse/eclipse_buildroot_plugin3.png "Eclipse select Buildroot plugin"

Wait a moment while the installation process is running.

@imageSize{eclipse_buildroot_plugin4.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_buildroot_plugin4.png "Installing software"
@image latex eclipse/eclipse_buildroot_plugin4.png "Installing software"

A security warning pop up appears has the provided plugins are not signed by the Eclipse Foundation,
just click on the OK button.

@imageSize{eclipse_buildroot_plugin5.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_buildroot_plugin5.png "Eclipse warning dialog"
@image latex eclipse/eclipse_buildroot_plugin5.png "Eclipse warning dialog"

When this is finished restart Eclipse.

@imageSize{eclipse_buildroot_plugin6.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_buildroot_plugin6.png "Eclipse restart dialog"
@image latex eclipse/eclipse_buildroot_plugin6.png "Eclipse restart dialog"

@section eclipse_create_new_project Create EGT project in Eclipse using Autotools

The purpose is to create a new EGT project that will use a toolchain generated by Buildroot.
In the below example we create a EGT project using autotool, it is up to the developer to write the
configure.ac file and Makefile.am. This allows the project to be built outside of Eclipse and to use
standard Unix tools as your project build system. For more details about the Autotools,See
<https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html>

Create a new CPP Project:

@imageSize{eclipse_new_cpp_project.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_new_cpp_project.png "Create new cpp project"
@image latex eclipse/eclipse_new_cpp_project.png "Create new cpp project"

Set the project name, select GNU Autotools Empty project type, Select Buildroot toolchain to build the
project and Click on Finish.

Note:If you can't find the expected toolchain in the list, then check if "Register toolchain with Eclipse
Buildroot plug-in" is enabled in your compiled Buildroot.

@imageSize{eclipse_save_project.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_save_project.png "Save project"
@image latex eclipse/eclipse_save_project.png "Save project"

When the user selects a toolchain for its project:

1. The PATH environment variable is defined to add the location of the Buildroot toolchain, so that the build
   process can easily find the cross-compiler and related tools.
2. A default value for the --host configure script option is set, to match the prefix of the cross-compilation
   toolchain. This will ensure that your project will be correctly cross-compiled with the Buildroot toolchain,
3. The integration with the scanner information was done in order to allow CDT to find automatically the header
   files.
4. The plugin provides the possibility to create Remote Launch configurations to execute the application on the
   target and create Remote Debug configurations which point automatically on the correct cross-debugger.

Create a new cpp file basic.cpp and copy below lines to basic.cpp file
@code{.sh}
#include <egt/ui>

int main(int argc, const char** argv)
{
    egt::Application app(argc, argv);

    egt::TopWindow window;
    egt::Button button(window, "Press Me");
    button.set_align(egt::alignmask::center);
    window.show();

    return app.run();
}
@endcode

@imageSize{eclipse_new_cpp.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_new_cpp.png "Create cpp file"
@image latex eclipse/eclipse_new_cpp.png "Create cpp file"

Create a new configure.ac file and copy below lines.
@code{.sh}
AC_PREREQ(2.59)
AC_INIT(basic, 1.0)
AC_PROG_CXX

AM_INIT_AUTOMAKE([1.10 foreign])

PKG_CHECK_MODULES(EGT, [libegt])
AC_SUBST(EGT_LIBS)
AC_SUBST(EGT_CFLAGS)

AC_CONFIG_FILES([Makefile])
AC_OUTPUT
@endcode

@imageSize{eclipse_new_configure.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_new_configure.png "Create configure.ac file"
@image latex eclipse/eclipse_new_configure.png "Create configure.ac file"

Create a new Makefile.am file. As your project extends, you may create additional Makefile.am files in
subdirectories of your project.
@code{.sh}
bin_PROGRAMS=basic

basic_SOURCES=basic.cpp
basic_CPPFLAGS = $(EGT_CFLAGS)
basic_LDFLAGS = $(EGT_LIBS)
@endcode

@imageSize{eclipse_new_Makefile_am.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_new_Makefile_am.png "Create Makefile.am file"
@image latex eclipse/eclipse_new_Makefile_am.png "Create Makefile.am file"

Invoke Autoreconf tool by Right-click on your project in the eclipse explorer view and select Invoke
Autotools->Invoke Autoreconf. This operation will call the autotools to generate the configure script
from configure.ac and Makefile.in from Makefile.am. This operation has to be done again if you make
changes to configure.ac or Makefile.am.

@imageSize{eclipse_invoke_autoreconf.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_invoke_autoreconf.png "Invoke autoreconf"
@image latex eclipse/eclipse_invoke_autoreconf.png "Invoke autoreconf"

Set the "-i -v -f" option to autoreconf command in a opened dialog.This tells autoreconf to automatically
install some additional scripts and files that are needed for correct operation of configure script.

@imageSize{eclipse_autoreconf_args.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_autoreconf_args.png "Set autoreconf arguments"
@image latex eclipse/eclipse_autoreconf_args.png "Set autoreconf arguments"

Now we can see in the console that autoreconf command finished successfully. configure and Makefile.in
files have generated in the project folder.

@imageSize{eclipse_autoreconf_success.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_autoreconf_success.png "Autoreconf success"
@image latex eclipse/eclipse_autoreconf_success.png "Autoreconf success"

Reconfigure project will call configure script with argument --host option that has been set to a default
value and this ensures that your project will be cross-compiled with the Buildroot toolchain.You may define
additional options by selecting properties option in your project in Eclipse.

@imageSize{eclipse_reconfigure_project.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_reconfigure_project.png "Reconfigure project"
@image latex eclipse/eclipse_reconfigure_project.png "Reconfigure project"

In the console, we can see operation finished successfully and Makefile generated.

@imageSize{eclipse_reconfigure_success.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_reconfigure_success.png "Reconfigure project finished"
@image latex eclipse/eclipse_reconfigure_success.png "Reconfigure project finished"

To build the project (Ctrl-b) or select Project->build all option.

@imageSize{eclipse_build_success.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_build_success.png "Build project"
@image latex eclipse/eclipse_build_success.png "Build project"

@section eclipse_execute_egt  Executing EGT application on Target remotely

This tutorial describes how to execute a remote EGT application using a Buildroot
toolchain in Eclipse.Since Eclipse will transfer the application binary using SSH
protocol and ssh server must have installed on your target.

Buildroot offers you two choices:

1. The Dropbear package can be enabled in Networking applications -> dropbear.
2. The full-blown SSH implementation, OpenSSH, which can be enabled in Networking applications -> openssh.

Most SSH servers do not allow to log in as root with an empty password. To set the root password is to login
on the target board then type:

@code{.sh}
# passwd
Changing password for root
New password:
Bad password: too short
Retype password:
Password for root changed by root
@endcode

First step is to create a new launch configuration. Right click your EGT project and click on Run As->Run Configurations...

@imageSize{eclipse_run_as.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_run_as.png "Run as"
@image latex eclipse/eclipse_run_as.png "Run as"

Create a new launcher according to your Buildroot toolchain:

@imageSize{eclipse_run_create_new.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_run_create_new.png "New launch configuration"
@image latex eclipse/eclipse_run_create_new.png "New launch configuration"

To setup a ssh connection with the target, create a new connection and select SSH only

@imageSize{eclipse_run_ssh_conn.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_run_ssh_conn.png "SSH connection setup"
@image latex eclipse/eclipse_run_ssh_conn.png "SSH connection setup"

click on Next button, Set the host name and click on Finish button.

@imageSize{eclipse_run_conn_finish.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_run_conn_finish.png "Finish launch configuration"
@image latex eclipse/eclipse_run_conn_finish.png "Finish launch configuration"

Set the Remote Absolute File Path to the location of the application on the target and
click Run Button

@imageSize{eclipse_run.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_run.png "Eclipse run"
@image latex eclipse/eclipse_run.png "Eclipse run"

If a pop-up appears, set target UserID and Password and Click on OK button. Make sure the
target and the host machine are connected through Ethernet:

@imageSize{eclipse_run_userid_details.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_run_userid_details.png "Set user credentials"
@image latex eclipse/eclipse_run_userid_details.png "Set user credentials"

Wait while application is copied to the target using SSH protocols.

@imageSize{eclipse_run_wait.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_run_wait.png "Coping application to target"
@image latex eclipse/eclipse_run_wait.png "Coping application to target"

Finally in the Console, see the traces of EGT application running on target

@imageSize{eclipse_run_finish.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_run_finish.png "Run finish"
@image latex eclipse/eclipse_run_finish.png "Run finish"

@section eclipse_debug Debug EGT application remotely

This section describes how to debug EGT Project using a
Buildroot toolchain in Eclipse.

Buildroot setup

As a preliminary step, you also need to ensure that gdbserver is
present on your target. if gdbserver not preset, then enable following
options in buildroot menuconfig:

1. Toolchain -> Build gdb server for the Target
2. Toolchain -> Build gdb for the Host
3. Target packages -> Debugging, profiling and benchmark -> gdb
4. Target packages -> Debugging, profiling and benchmark -> gdbserver

To get a nice debugging experience, you may want Buildroot to build
the libraries with debugging symbols. To do so, enable the
Build options -> build packages with debugging symbols option.

Launch remote debug

Click on the debug button in the toolbar and select EGTProject launcher you
created in above section.

@imageSize{eclipse_debuger_launch.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_debuger_launch.png "Select debug launcher"
@image latex eclipse/eclipse_debuger_launch.png "Select debug launcher"

Click on Yes in Confirm perspective switch dialog.

@imageSize{eclipse_confirm_dialog.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_confirm_dialog.png  "Confirm debug dialog"
@image latex eclipse/eclipse_confirm_dialog.png "Confirm debug dialog"

Eclipse will switch automatically to Debug perspective window and debugger
stops on the main function of the application and you can see variable
values or change variable values from the Variables view window.

@imageSize{eclipse_debug_window.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_debug_window.png "Eclipse debug Window"
@image latex eclipse/eclipse_debug_window.png "Eclipse debug Window"

To add breakpoints from editor, you can double click on the left side
of a editor or by right clicking left side of editor and click a "Add
breakpoint" from a context menu.

@imageSize{eclipse_debug_add_bp.png,max-width:90%;height:auto;}
@image html eclipse/eclipse_debug_add_bp.png "Set brakpoint in Eclipse editor"
@image latex eclipse/eclipse_debug_add_bp.png "Set brakpoint in Eclipse editor"

Using Debug control buttons in the toolbar, you can control the debuger
to Resume, Treminate, Step into or step over.

*/
}}
