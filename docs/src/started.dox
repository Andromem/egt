namespace egt { inline namespace v1 {
/**

 @page started Getting Started

There are various was to get started with EGT depending on your requirements.

If you are building EGT on a PC you can start by just fetching the source of the
EGT project.  If you are developing for and deploying to a target board, the
easiest way to work with EGT is part of a buildroot SDK which already includes
a cross compiler and all of the necessary dependencies and tools.

Also, see @subpage eclipse for how to setup the Eclipse IDE for host or cross
compiling.

@section started_fetching Fetching Source

To simply fetch the source:

@code{.sh}
git clone --recursive https://bitbucket.microchip.com/scm/linux4sam/egt.git
@endcode

@section started_building Building

EGT uses the GNU autotools, like autoconf and automake, for building on Linux
platforms.

To build for a PC, first, install dependencies:

@code{.sh}
sudo apt-get install librapidxml-dev liblua5.3-dev libdrm-dev libinput-dev \
    libcairo-dev libjpeg-dev libmagic-dev libcurl4-openssl-dev
@endcode

Then build.

@code{.sh}
git clone --recursive https://bitbucket.microchip.com/scm/linux4sam/egt.git
cd egt
./autogen.sh
./configure
make
@endcode

Then run.

@code{.sh}
cd examples/basic
./basic
@endcode

EGT also supports cross compilation for target systems. If you already have a
cross compiler available with dependent libraries available, add it to your
PATH and follow the standard instructions.

@code{.sh}
./autogen.sh
./configure --prefix=/nfsroot/root/egt/ --host=arm-buildroot-linux-gnueabi
make
@endcode

You can run "./configure --help" to see more options.  Some non-standard
options are listed here.

@par `--disable-debug`
build without debugging support [default=yes]

@par `--disable-examples`
don't build examples [default=no]

@section started_buildroot Cross Compiling With Buildroot

We provide EGT as part of the <a href="https://bitbucket.microchip.com/projects/LINUX4SAM/repos/buildroot-external-microchip/browse">buildroot-external-microchip</a> project. To build a
complete SDK and target filesystem for a board follow the instructions found at:

https://bitbucket.microchip.com/scm/linux4sam/buildroot-external-microchip.git

Follow the README.md instructions for that project with the following versions.

@code{.sh}
git clone https://bitbucket.microchip.com/scm/linux4sam/buildroot-external-microchip.git -b egt_devel
git clone https://bitbucket.microchip.com/scm/linux4sam/buildroot-at91.git -b egt_devel
cd buildroot-at91
BR2_EXTERNAL=../buildroot-external-microchip/ make sam9x60ek_egt_defconfig
make
@endcode

See the configs directory in the buildroot-external-microchip project for
alternate EGT defconfigs.

@section started_first First Application

The *examples* folder of the EGT project contains various examples.  This is the
basic example which shows the minimum necessary to create a window with a button
on it.

The include file <egt/ui> contains most basic functionality needed.

@code{.cpp}
#include <egt/ui>

int main(int argc, const char** argv)
{
    egt::Application app(argc, argv);

    egt::TopWindow window;
    egt::Button button(window, "Press Me");
    button.set_align(egt::alignmask::center);
    window.show();

    return app.run();
}
@endcode

If you want to use a UI file instead.

@code{.cpp}
#include <egt/ui>
#include <egt/uiloader.h>

int main(int argc, const char** argv)
{
    egt::Application app(argc, argv);

    egt::experimental::UiLoader loader;
    auto window = loader.load("ui.xml");
    window->show();

    return app.run();
}
@endcode

*/
}}
