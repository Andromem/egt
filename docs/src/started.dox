namespace egt { inline namespace v1 {
/**

 @page started Getting Started

There are various ways to get started with EGT depending on your requirements.
If building for a Microchip MPU Xplained or EK type board, visit
[Linux4SAM](http://www.at91.com/linux4sam/bin/view/Linux4SAM). If you
are building EGT on a PC, you can start by just fetching the source of the EGT
project.  If you are developing for and deploying to a target board, the easiest
way to work with EGT is part of a buildroot SDK which already includes a cross
compiler and all of the necessary dependencies and tools.

Also, see @subpage eclipse for how to setup the Eclipse IDE for host or cross
compiling.

@section started_fetching Fetching Source

Fetch the source:

@code{.sh}
git clone --recursive https://github.com/linux4sam/egt.git
@endcode

@note Note the `--recursive` option.  This option is necessary to initialize any
git submodules in the project.  If you forget to do this, autogen.sh will do it
for you.

@section started_building Building

EGT uses the GNU autotools, like autoconf and automake, for building on Linux
platforms.

To build for a PC, first install the required dependencies:

@code{.sh}
sudo apt-get install build-essential automake autoconf libtool pkg-config \
    libdrm-dev libinput-dev libcairo-dev libjpeg-dev libmagic-dev gettext
@endcode

Optional, but recommended, dependencies include:

@code{.sh}
sudo apt-get install librsvg2-dev liblua5.3-dev libcurl4-openssl-dev \
     libxkbcommon-dev xkb-data
sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
sudo apt-get install libplplot-dev plplot-driver-cairo
sudo apt-get install libasound2-dev libsndfile1-dev
@endcode

Then, clone the source and initialize autotools.  Typically autotools only needs
to be initialized once and it will automatically pick up most changes.  However,
when making changes to the configure scripts, the environment, or makefiles
re-running autogen.sh, or more simply autoreconf -fvi, is necessary.

@code{.sh}
git clone --recursive https://github.com/linux4sam/egt.git
cd egt
./autogen.sh
@endcode

Then, configure and build.

@code{.sh}
./configure
make
@endcode

You can also build out of the source tree.  This is useful, for example, to use
the same code tree with different parameters and environments to configure the
build in as many different build directories as you wish.  It also avoids
polutting the source tree with build artifacts.

@code{.sh}
mkdir -p build/host
cd build/host
../../configure
make
@endcode

Then, run an example.

@code{.sh}
cd examples/basic
./basic
@endcode

EGT also supports cross compilation for target systems. If you already have a
cross compiler available with dependent libraries available, add it to your
PATH and follow the standard instructions.

@note When adding cross compilation paths to the PATH environment variable, it
should come before any existing system paths.

@code{.sh}
./autogen.sh
./configure --prefix=/nfsroot/root/egt/ --host=arm-buildroot-linux-gnueabi
make
@endcode

@section started_configure Configure Options

You can run "./configure --help" to see more options.  Some non-standard
options are listed here, but not all.

@par `--enable-code-coverage`
Whether to enable code coverage support

@par `--disable-debug`
build without debugging support [default=no]

@par `--enable-gcov`
turn on code coverage analysis tools

@par `--enable-profile`
turn on profiling tools

@par `--enable-examples`
build examples [default=yes]

@par `--enable-lto`
enable gcc's LTO [default=no]

@section started_buildroot Cross Compiling With Buildroot

EGT is included as a package as part of the
[buildroot-external-microchip](https://github.com/linux4sam/buildroot-external-microchip)
project. To build a complete SDK and target filesystem for a board, follow the
instructions found in that project's README with the following versions.

@code{.sh}
git clone https://github.com/linux4sam/buildroot-external-microchip.git -b egt_devel
git clone https://git.buildroot.net/buildroot -b 2019.05.1
cd buildroot
BR2_EXTERNAL=../buildroot-external-microchip/ make sam9x60ek_egt_defconfig
make
@endcode

See the configs directory in the buildroot-external-microchip project for
alternate EGT defconfigs.

@section started_first First Application

The *examples* folder of the EGT project contains various examples.  This is the
basic example which shows the minimum necessary to create a window with a button
on it.

The include file <egt/ui> contains most basic functionality needed.

@snippet "../examples/basic/basic.cpp" Example

If you want to use a UI file instead.

@snippet "../examples/basicui/basicui.cpp" Example


@section started_zeal Using this Documentation Offline or With Other Development Tools

This documentation is also available in the form of a docset that can be
read and searched using a tool like [Dash](https://kapeli.com/dash) (macOS) and
[Zeal](https://zealdocs.org/) (macOS/Windows/Linux).  In turn, the documentation
can be integrated into an IDE or tools like Atom/VSCode for an indexed and
easily searchable API reference.  These tools also provide a method for
automatically or manually updating the documentation.

Once you have one of these tools installed, the docset feed URL is located at:

https://linux4sam.github.io/egt-docs/docset/EGT.xml

@note To install Zeal, see the [official documentation to download and
    installing](https://zealdocs.org/download.html).  Specifically, on Ubuntu,
    you should get the latest version with their PPA.
    @code{.sh}
    sudo add-apt-repository ppa:zeal-developers/ppa
    sudo apt-get update
    sudo apt-get install zeal
    @endcode

*/
}}
