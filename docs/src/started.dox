namespace egt { inline namespace v1 {
/**

 @page started Getting Started

There are various ways to get started with EGT depending on your requirements.
If building for an Microchip MPU Xplained or EK type board, visit
<a href="http://www.at91.com/linux4sam/bin/view/Linux4SAM">Linux4SAM</a>. If you
are building EGT on a PC you can start by just fetching the source of the EGT
project.  If you are developing for and deploying to a target board, the easiest
way to work with EGT is part of a buildroot SDK which already includes a cross
compiler and all of the necessary dependencies and tools.

Also, see @subpage eclipse for how to setup the Eclipse IDE for host or cross
compiling.

@section started_fetching Fetching Source

Fetch the source:

@code{.sh}
git clone --recursive https://bitbucket.microchip.com/scm/linux4sam/egt.git
@endcode

@note Note the `--recursive` option.  This option is necessary to initialize any
git submodules in the project.

@section started_building Building

EGT uses the GNU autotools, like autoconf and automake, for building on Linux
platforms.

To build for a PC, first install recommended dependencies:

@code{.sh}
sudo apt-get install build-essential automake autoconf libtool pkg-config \
    libdrm-dev libinput-dev libcairo-dev libjpeg-dev libmagic-dev gettext
@endcode

Optional dependencies include:

@code{.sh}
sudo apt-get install librsvg2-dev liblua5.3-dev libcurl4-openssl-dev \
     libxkbcommon-dev xkb-data libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
@endcode

Then clone the source and build.

@code{.sh}
git clone --recursive https://bitbucket.microchip.com/scm/linux4sam/egt.git
cd egt
./autogen.sh
./configure
make
@endcode

Then run.

@code{.sh}
cd examples/basic
./basic
@endcode

EGT also supports cross compilation for target systems. If you already have a
cross compiler available with dependent libraries available, add it to your
PATH and follow the standard instructions.

@code{.sh}
./autogen.sh
./configure --prefix=/nfsroot/root/egt/ --host=arm-buildroot-linux-gnueabi
make
@endcode

@section started_configure Configure Options

You can run "./configure --help" to see more options.  Some non-standard
options are listed here.

@par `--enable-code-coverage`
Whether to enable code coverage support

@par `--disable-debug`
build without debugging support [default=no]

@par `--enable-gcov`
turn on code coverage analysis tools

@par `--enable-profile`
turn on profiling tools

@par `--enable-examples`
build examples [default=yes]

@par `--enable-lto`
enable gcc's LTO [default=no]

@section started_buildroot Cross Compiling With Buildroot

We provide EGT as part of the <a href="https://bitbucket.microchip.com/projects/LINUX4SAM/repos/buildroot-external-microchip/browse">buildroot-external-microchip</a> project. To build a
complete SDK and target filesystem for a board follow the instructions found in the buildroot-external-microchip project README.

@see https://bitbucket.microchip.com/scm/linux4sam/buildroot-external-microchip.git

Follow the README.md instructions for that project with the following versions.

@code{.sh}
git clone https://bitbucket.microchip.com/scm/linux4sam/buildroot-external-microchip.git -b egt_devel
git clone https://bitbucket.microchip.com/scm/linux4sam/buildroot-at91.git -b egt_devel
cd buildroot-at91
BR2_EXTERNAL=../buildroot-external-microchip/ make sam9x60ek_egt_defconfig
make
@endcode

See the configs directory in the buildroot-external-microchip project for
alternate EGT defconfigs.

@section started_first First Application

The *examples* folder of the EGT project contains various examples.  This is the
basic example which shows the minimum necessary to create a window with a button
on it.

The include file <egt/ui> contains most basic functionality needed.

\snippet "../examples/basic/basic.cpp" Example

If you want to use a UI file instead.

\snippet "../examples/basicui/basicui.cpp" Example

*/
}}
